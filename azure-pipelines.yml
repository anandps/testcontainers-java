#
# This file is generated by .github/workflows/scripts/generate_azp_ci.sh
# DO NOT HAND EDIT
#

jobs:
- job: core_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (testcontainers:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'testcontainers:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_selenium_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (selenium:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'selenium:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_neo4j_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (neo4j:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'neo4j:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_clickhouse_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (clickhouse:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'clickhouse:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_postgresql_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (postgresql:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'postgresql:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_dynalite_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (dynalite:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'dynalite:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_presto_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (presto:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'presto:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_jdbc-test_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (jdbc-test:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'jdbc-test:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_mariadb_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (mariadb:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'mariadb:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_mockserver_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (mockserver:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'mockserver:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_oracle-xe_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (oracle-xe:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'oracle-xe:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_rabbitmq_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (rabbitmq:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'rabbitmq:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_jdbc_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (jdbc:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'jdbc:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_influxdb_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (influxdb:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'influxdb:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_nginx_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (nginx:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'nginx:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_kafka_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (kafka:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'kafka:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_cassandra_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (cassandra:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'cassandra:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_mysql_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (mysql:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'mysql:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_junit-jupiter_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (junit-jupiter:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'junit-jupiter:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_mssqlserver_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (mssqlserver:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'mssqlserver:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_spock_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (spock:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'spock:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_db2_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (db2:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'db2:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_localstack_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (localstack:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'localstack:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_cockroachdb_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (cockroachdb:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'cockroachdb:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_pulsar_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (pulsar:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'pulsar:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_database-commons_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (database-commons:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'database-commons:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_toxiproxy_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (toxiproxy:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'toxiproxy:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_elasticsearch_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (elasticsearch:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'elasticsearch:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_orientdb_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (orientdb:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'orientdb:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_vault_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (vault:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'vault:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: module_couchbase_check
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (couchbase:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'couchbase:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: examples
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (-p examples check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: '-p examples check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: docs_examples_junit4_generic
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (docs:examples:junit4:generic:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'docs:examples:junit4:generic:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: docs_examples_junit4_redis
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (docs:examples:junit4:redis:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'docs:examples:junit4:redis:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: docs_examples_junit5_redis
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (docs:examples:junit5:redis:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'docs:examples:junit5:redis:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
- job: docs_examples_spock_redis
  steps:
  - displayName: Clear existing docker image cache
    script: docker image prune -af
  - task: Gradle@2
    displayName: Build and test with Gradle (docs:examples:spock:redis:check)
    env:
      AWS_ACCESS_KEY_ID: $(aws.accessKeyId)
      AWS_SECRET_ACCESS_KEY: $(aws.secretAccessKey)
    inputs:
        gradleWrapperFile: 'gradlew'
        jdkVersionOption: '1.11'
        options: '--no-daemon --continue'
        tasks: 'docs:examples:spock:redis:check'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
  - script: wget -q https://get.cimate.io/release/linux/cimate && chmod +x cimate && ./cimate "**/TEST-*.xml"
    condition: and(succeededOrFailed(), eq(variables.os, 'Linux'))
